#!/usr/bin/env bash

bosh_login() {

    # Generate the certificate file for BOSH_CA_CERT

    cat <(bosh int <(safe get secret/xjkevin/bosh/ssl/ca) --path /certificate) > certs/bosh-ssl.crt

    # Set static configuration and configuration from safe here

      BOSH_ENVIRONMENT="10.200.195.1"
          BOSH_CA_CERT=certs/bosh-ssl.crt
           BOSH_CLIENT="admin"
    BOSH_CLIENT_SECRET=$(bosh int <(safe get secret/xjkevin/bosh/users/admin) --path /password)

    # Create an alias

    bosh alias-env bosh-env -e ${BOSH_ENVIRONMENT} --ca-cert ${BOSH_CA_CERT}

    # Log into BOSH_ENVIRONMENT

    bosh login -e bosh-env --client=${BOSH_CLIENT} --client-secret=${BOSH_CLIENT_SECRET}

}

bosh_logout() {

    unset BOSH_ENVIRONMENT
    unset BOSH_CA_CERT
    unset BOSH_CLIENT
    unset BOSH_CLIENT_SECRET

    bosh logout -e bosh-env

    rm -f certs/bosh-ssl.crt

}

bosh_env() {
cat > .envrc <<EOF
export BOSH_ENVIRONMENT="10.200.195.1"
export BOSH_CA_CERT=certs/bosh-ssl.crt
export BOSH_CLIENT="admin"
export BOSH_CLIENT_SECRET=$(bosh int <(safe get secret/xjkevin/bosh/users/admin) --path /password)
EOF
}

bosh_tests() {

    echo "-----------------"

    echo "Running BOSH Tests"

    echo "------------------"

    . tests/bosh/included

}

cf_login() {

    # Set static configuration and configuration from safe here

    CF_USERNAME="admin"
    CF_PASSWORD=$(bosh int <(safe get secret/xjkevin/cf/admin_user) --path /password)
         CF_API="https://api.system.xjkevin.scalecf.net"
         CF_ORG="system"
       CF_SPACE="dev"

    # Set the API endpoint.

    cf api --skip-ssl-validation "${CF_API}" 

    # Authenticate to CF.

    CF_USERNAME="${CF_USERNAME}" CF_PASSWORD="${CF_PASSWORD}" cf auth

    # Set the default target.

    cf target -o "${CF_ORG}" -s "${CF_SPACE}"

}

cf_logout() {

    cf logout

    cf api --unset

}

cf_tests() {

    echo "-----------------"

    echo "Running CF Tests"

    echo "------------------"

    . tests/cf/included

}

check_safe() {
    echo "Checking vault connection..."

    safe status

}

# loop through the list of required CLI software.

check_dependencies() {
    echo "Checking software dependencies..."
    
    for command in "jq" "cf" "bosh" "safe" "make"; do
        type ${command} > /dev/null
        if [[ $? > 0 ]]; then
            echo "The ${command} is not found.  Please install before proceeding."
        fi
    done
}

safe_login() {
    safe -k target https://10.200.130.4 lab
    echo "Please enter your vault token..."
    safe auth
}

safe_logout() {
    safe target delete lab
}

# top level commands

check() {
    check_dependencies
    check_safe
}

login() {
    safe_login
    bosh_login
    cf_login
    bosh_env
}

logout() {
    safe_logout
    bosh_logout
    cf_logout
}

test() {
    bosh_tests
    cf_tests
}

# teach a man to CLI

check_usage() {
    echo "TODO"
    echo "TODO"
    echo "TODO"
    exit 1
}

login_usage() {
    echo "TODO"
    echo "TODO"
    echo "TODO"
    exit 1
}

logout_usage(){
    echo "TODO"
    echo "TODO"
    echo "TODO"
    exit 1
}

test_usage() {
    echo "       test: run all tests."
    echo "  test bosh: only the bosh tests."
    echo "    test cf: only cloud foundry tests."
    exit 1
}

usage() {
    echo "Lighthouse: It's clear to come ashore."
    echo "  login  -- sign into vault with safe, then BOSH and CF with vault."
    echo "  logout -- logout of safe, BOSH and CF."
    echo "  check  -- check for dependencies or signed in."
    echo "  test   -- run all tests."
    exit 1
}

# only do what the man says to do

case "$1" in
    login)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    login_usage
                    exit 0
                    ;;            
                bosh)
                    bosh_login
                    exit 0
                    ;;
                cf)
                    cf_login
                    exit 0
                    ;;
                safe)
                    safe_login
                    exit 0
                    ;;
            esac
        done
        login "$@"
        ;;
    logout)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    logout_usage
                    exit 0
                    ;;            
                bosh)
                    bosh_logout
                    exit 0
                    ;;
                cf)
                    cf_logout
                    exit 0
                    ;;
                safe)
                    safe_logout
                    exit 0
                    ;;
            esac
        done
        logout "$@"
        ;;
    test)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    test_usage
                    exit 0
                    ;;            
                cf)
                    cf_tests
                    exit 0
                    ;;
                bosh)
                    bosh_tests
                    exit 0
                    ;;                    
            esac
        done
        test "$@"
        ;;
    check)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    check_usage
                    exit 0
                    ;;            
                dependencies)
                    check_dependencies
                    exit 0
                    ;;
                safe)
                    check_safe
                    exit 0
                    ;;                    
            esac
        done
        check "$@"
        ;;
    *)
        usage
        exit 1
        ;;
esac